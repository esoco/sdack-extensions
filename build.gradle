buildscript {
    repositories { jcenter() }
    dependencies { classpath 'de.richsource.gradle.plugins:gwt-gradle-plugin:0.6' }
}

apply plugin: 'java'
apply plugin: 'osgi'
apply plugin: 'eclipse'

project.group   = 'de.esoco'

sourceCompatibility = 1.8

repositories {
    jcenter()
}

dependencies {
 	if (project(':sdack').getProjectDir().exists()) {
		compile project(':sdack')
	}
	else {
		compile 'de.esoco:sdack:1.2.+'
	}
 	if (project(':gewt-chart').getProjectDir().exists()) {
		compile project(':gewt-chart')
	}
	else {
		compile 'de.esoco:gewt-chart:1.1.+'
	}
 	if (project(':gewt-timetable').getProjectDir().exists()) {
		compile project(':gewt-timetable')
	}
	else {
		compile 'de.esoco:gewt-timetable:1.1.+'
	}
 	if (project(':esoco-oauth').getProjectDir().exists()) {
		compile project(':esoco-oauth')
	}
	else {
		compile 'de.esoco:esoco-oauth:1.1.+'
	}

	compile 'commons-fileupload:commons-fileupload:1.3.+'
	
	compileOnly 'javax.servlet:javax.servlet-api:3.0.1'

    testCompile 'junit:junit:4.+'
}

// sources are need for the GWT compiler
jar { from sourceSets.main.allSource }

task sourceJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourceJar
    archives javadocJar
}

tasks.withType(Javadoc) {
    failOnError = false
    options.addBooleanOption('quiet', true)
    
    if (JavaVersion.current().isJava8Compatible()) {
        options.addBooleanOption('Xdoclint:none', true) 
    }
}


task fullJar(type: Jar) {
    baseName = 'sdack-extensions-all'

    manifest {
        attributes 'Implementation-Title': 'SDACK - Simple Development Application Component Kit',
	        	   'Implementation-Version': project.version,
	               'Built-Date': new Date(),
                   'Built-JDK': System.getProperty('java.version')

    }
    // exclude files from GWT jar
 	exclude('com/**')
 	exclude('javax/**')
 	exclude('rhino_ast/**')
 	exclude('META-INF/maven/**')
 	// exclude hibernate which is only used for testing
 	exclude('org/hibernate/**')

	from { configurations.compile.collect
		{ it.isDirectory() ? it : zipTree(it) }
	}
    with jar
}

// ----------- Bintray Release -----------

buildscript {
    repositories { jcenter() }
    dependencies { classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7' }
}
apply plugin: 'com.jfrog.bintray'
apply plugin: 'maven'

bintray {
	user = project.hasProperty('bintrayUser') ?
				project.property('bintrayUser') :
				System.getenv('BINTRAY_USER')
	key = project.hasProperty('bintrayApiKey') ?
				project.property('bintrayApiKey') :
				System.getenv('BINTRAY_API_KEY')
    configurations = ['archives']
    publish = true

	pkg {
		repo = 'sdack'
		name = project.name
		version {
			name = project.version
	    }
    }
}
